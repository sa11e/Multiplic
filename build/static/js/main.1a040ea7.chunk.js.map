{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/numkey.jsx","components/counters.jsx","components/numpad.jsx","components/question.jsx","components/resultBoard.jsx","components/timer.jsx","components/startButton.jsx","components/image.jsx","components/selectAnswerButtons.jsx","components/toogleAnswerMode.jsx","components/selectMultiTable.jsx","components/settingsPanel.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","state","react_default","a","createElement","className","href","this","props","bestResultTimeText","Component","Counter","_this","getBadgeClasses","formatCount","onClick","onIncrement","counter","onDelete","id","classes","value","NumKey","_this2","keyvalue","NumPad","numkey","key","numkeyClicked","clearClicked","okClicked","answerField","Question","style","fontSize","questionText","ResultBoard","correctAnswers","total","resultTextClasses","resultText","Timer","timer","StartButton","buttonText","timerText","Image","display","imageShouldHide","src","imageFullPath","SelectAnswerButtons","choices","answerbuttonClicked","ToogleAnswerMode","onChange","event","onAnswerModeChanged","target","type","name","defaultChecked","choooseAnswerChecked","SelectMultiTable","updateSelectedMultiTable","SettingsPanel","onSettingsPanelClicked","settingsShouldHide","toogleAnswerMode","answerMode","selectMultiTable","newTable","App","answered","totalQuestions","window","location","includes","selectedMultitable","question","answer","startTime","timerHandle","resultTime","bestResultTime","startButtonText","isGameStarted","webcamShouldHide","hideNumPad","hideSelectButtons","modalShow","caputuredImage","modalClose","setState","createNextQuestion","random","Math","floor","setAnswerMode","getFixedAnswers","correctAnswer","fixedAnswers","i","numberOfAnswers","getRandomAnswer","excludeList","randomAnswer","handleClearClicked","handleAnswerbuttonClicked","handleOkClicked","endGame","stopGame","getTimerText","handleStartButtonClicked","startGame","capture","Date","timerHandler","setInterval","tick","settingsPanelClicked","currentValue","clearInterval","setResultTime","date1","milliseconds","getTime","console","log","mins","seconds","round","numkeyOnClickHandler","mode","setRef","webcam","imageSrc","getScreenshot","Fragment","navbar","settingsPanel","startButton","resultBoard","selectAnswerButtons","numpad","hide","react_webcam_default","audio","height","ref","screenshotFormat","width","videoConstraints","facingMode","components_image","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1a040ea7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nclass NavBar extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-light bg-light\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          Bäst tid hittills:{\" \"}\r\n          <span className=\"badge badge-pill badge-secondary\">\r\n            {this.props.bestResultTimeText}\r\n          </span>\r\n        </a>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\nclass Counter extends Component {\r\n  render() {\r\n    // console.log(\"props\", this.props);\r\n    return (\r\n      <div>\r\n        {/* <img src={this.state.imageUrl} alt=\"bla\" /> */}\r\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n        <button\r\n          onClick={() => this.props.onIncrement(this.props.counter)}\r\n          className={\"btn btn-secondary btn-sm\"}\r\n        >\r\n          Increment\r\n        </button>\r\n\r\n        <button\r\n          onClick={() => this.props.onDelete(this.props.counter.id)}\r\n          className=\"btn btn-danger btn-sm m-2\"\r\n        >\r\n          Delete\r\n        </button>\r\n\r\n        {/* <ul>\r\n          {this.state.tags.map(tag => (\r\n            <li key={tag}>{tag}</li>\r\n          ))}\r\n        </ul> */}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getBadgeClasses() {\r\n    let classes = \"badge m-2 badge-\";\r\n    classes += this.props.counter.value == 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n\r\n  formatCount() {\r\n    // const { count } = this.state.count;\r\n    return this.props.counter.value === 0 ? \"Zero\" : this.props.counter.value;\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\n\r\nclass NumKey extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <button\r\n        onClick={() => this.props.onClick(this.props.keyvalue)}\r\n        className=\"btn btn-secondary btn-l m-2\"\r\n      >\r\n        {this.props.keyvalue}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NumKey;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends Component {\r\n  render() {\r\n    const { onReset, onDelete, onIncrement } = this.props;\r\n    return (\r\n      <div>\r\n        <button onClick={onReset} className=\"btn btn-primary btn-sm m-2\">\r\n          Reset\r\n        </button>\r\n\r\n        {this.props.counters.map(counter => (\r\n          <Counter\r\n            key={counter.id}\r\n            onDelete={onDelete}\r\n            onIncrement={onIncrement}\r\n            counter={counter}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React, { Component } from \"react\";\r\nimport NumKey from \"./numkey\";\r\n\r\nclass NumPad extends Component {\r\n  state = {};\r\n\r\n  // numkeyOnClickHandler = numkey => {\r\n  //   var inputValue = \"\";\r\n  //   if (numkey < 10) {\r\n  //     inputValue = this.state.inputValue + numkey;\r\n  //   }\r\n\r\n  //   this.setState({ inputValue });\r\n  // };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {/* <div>\r\n          <span>\r\n            <b>Svar:</b> {this.state.inputValue}\r\n          </span>\r\n        </div> */}\r\n        <div>\r\n          <NumKey\r\n            key={1}\r\n            keyvalue={1}\r\n            onClick={() => this.props.numkeyClicked(1)}\r\n          />\r\n          <NumKey\r\n            key={2}\r\n            keyvalue={2}\r\n            onClick={() => this.props.numkeyClicked(2)}\r\n          />\r\n          <NumKey\r\n            key={3}\r\n            keyvalue={3}\r\n            onClick={() => this.props.numkeyClicked(3)}\r\n          />\r\n          <NumKey\r\n            key={98}\r\n            keyvalue={\"Clear\"}\r\n            onClick={() => this.props.clearClicked()}\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <NumKey\r\n            key={4}\r\n            keyvalue={4}\r\n            onClick={() => this.props.numkeyClicked(4)}\r\n          />\r\n          <NumKey\r\n            key={5}\r\n            keyvalue={5}\r\n            onClick={() => this.props.numkeyClicked(5)}\r\n          />\r\n          <NumKey\r\n            key={6}\r\n            keyvalue={6}\r\n            onClick={() => this.props.numkeyClicked(6)}\r\n          />\r\n          <NumKey\r\n            key={99}\r\n            keyvalue={\"OK\"}\r\n            onClick={() => this.props.okClicked(this.props.answerField)}\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <NumKey\r\n            key={7}\r\n            keyvalue={7}\r\n            onClick={() => this.props.numkeyClicked(7)}\r\n          />\r\n          <NumKey\r\n            key={8}\r\n            keyvalue={8}\r\n            onClick={() => this.props.numkeyClicked(8)}\r\n          />\r\n          <NumKey\r\n            key={9}\r\n            keyvalue={9}\r\n            onClick={() => this.props.numkeyClicked(9)}\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <NumKey\r\n            key={0}\r\n            keyvalue={0}\r\n            onClick={() => this.props.numkeyClicked(0)}\r\n          />\r\n        </div>\r\n\r\n        {/* {this.state.numKeys.map(numkey => (\r\n          <NumKey\r\n            key={numkey.id}\r\n            keyvalue={numkey.keyValue}\r\n            onClick={this.numkeyOnClickHandler}\r\n          />\r\n        ))} */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NumPad;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Question extends Component {\r\n  state = {};\r\n  render() {\r\n    const style = {\r\n      fontSize: \"xx-large\"\r\n    };\r\n    return (\r\n      <div style={style}>\r\n        <span className=\"mr-2\">\r\n          <b>Fråga:</b>\r\n        </span>\r\n        <span>{this.props.questionText} </span>\r\n        <span>\r\n          <b>{this.props.answerField}</b>\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Question;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ResultBoard extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div className=\"well\">\r\n        <span className=\"badge badge-pill badge-secondary mr-2\">\r\n          {this.props.correctAnswers} / {this.props.total}\r\n        </span>\r\n        <span className={\"badge \" + this.props.resultTextClasses}>\r\n          {this.props.resultText}\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ResultBoard;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Timer extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div>\r\n        <span>{this.props.timer}</span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timer;\r\n","import React, { Component } from \"react\";\r\nclass StartButton extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button\r\n          className=\"btn btn-secondary btn-l m-2\"\r\n          onClick={this.props.onClick}\r\n        >\r\n          {this.props.buttonText}\r\n        </button>\r\n        <span>{\"Tid: \" + this.props.timerText}</span>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default StartButton;\r\n","import React, { Component } from \"react\";\r\nclass Image extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      // <img src={ require('./images/image1.jpg') } />\r\n      <div\r\n        style={{\r\n          display: this.props.imageShouldHide ? \"none\" : \"block\"\r\n        }}\r\n      >\r\n        <img\r\n          // className={this.props.imageShouldHide ? \"hidden\" : \"\"}\r\n          src={this.props.imageFullPath}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Image;\r\n","import React, { Component } from \"react\";\r\nimport NumKey from \"./numkey\";\r\n\r\nclass SelectAnswerButtons extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <div>\r\n        <NumKey\r\n          key={this.props.choices[0]}\r\n          keyvalue={this.props.choices[0]}\r\n          onClick={() => this.props.answerbuttonClicked(this.props.choices[0])}\r\n        />\r\n        <NumKey\r\n          key={this.props.choices[1]}\r\n          keyvalue={this.props.choices[1]}\r\n          onClick={() => this.props.answerbuttonClicked(this.props.choices[1])}\r\n        />\r\n        <NumKey\r\n          key={this.props.choices[2]}\r\n          keyvalue={this.props.choices[2]}\r\n          onClick={() => this.props.answerbuttonClicked(this.props.choices[2])}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SelectAnswerButtons;\r\n","import React, { Component } from \"react\";\r\n\r\nclass ToogleAnswerMode extends Component {\r\n  state = {};\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        // onChange={event => this.props.onAnswerModeChanged(event.target.value)}\r\n        onChange={event => this.props.onAnswerModeChanged(event.target.value)}\r\n      >\r\n        <input\r\n          type=\"radio\"\r\n          value=\"numpad\"\r\n          name=\"toogleAnswerMode\"\r\n          defaultChecked={!this.props.choooseAnswerChecked}\r\n        />{\" \"}\r\n        1-9\r\n        <input\r\n          type=\"radio\"\r\n          value=\"choose_answer\"\r\n          name=\"toogleAnswerMode\"\r\n          defaultChecked={this.props.choooseAnswerChecked}\r\n        />{\" \"}\r\n        Välj rätt svar\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ToogleAnswerMode;\r\n","import React, { Component } from \"react\";\r\nimport NumKey from \"./numkey\";\r\n\r\nclass SelectMultiTable extends Component {\r\n  state = {};\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        Välj multiplikationstabell:\r\n        <NumKey\r\n          key={2}\r\n          keyvalue={2}\r\n          onClick={() => this.props.updateSelectedMultiTable(2)}\r\n        />\r\n        <NumKey\r\n          key={3}\r\n          keyvalue={3}\r\n          onClick={() => this.props.updateSelectedMultiTable(3)}\r\n        />\r\n        <NumKey\r\n          key={5}\r\n          keyvalue={5}\r\n          onClick={() => this.props.updateSelectedMultiTable(5)}\r\n        />\r\n        <NumKey\r\n          key={10}\r\n          keyvalue={10}\r\n          onClick={() => this.props.updateSelectedMultiTable(10)}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SelectMultiTable;\r\n","import React, { Component } from \"react\";\r\nimport ToogleAnswerMode from \"./toogleAnswerMode\";\r\nimport SelectMultiTable from \"./selectMultiTable\";\r\n\r\nclass SettingsPanel extends Component {\r\n  state = {};\r\n  render() {\r\n    // const { setAnswerMode } = this.props;\r\n\r\n    return (\r\n      <div\r\n        onClick={event => this.props.onSettingsPanelClicked(event.target.value)}\r\n      >\r\n        <span className=\"mr-3\">\r\n          <b>Inställningar {this.props.settingsShouldHide ? \"▼\" : \"▲\"}</b>\r\n        </span>\r\n        <div\r\n          style={{ display: this.props.settingsShouldHide ? \"none\" : \"block\" }}\r\n        >\r\n          <ToogleAnswerMode\r\n            onAnswerModeChanged={this.props.onAnswerModeChanged}\r\n            choooseAnswerChecked={this.state.answerMode != \"numpad\"}\r\n          />\r\n          <SelectMultiTable\r\n            updateSelectedMultiTable={newTable =>\r\n              this.props.updateSelectedMultiTable(newTable)\r\n            }\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SettingsPanel;\r\n","import React, { Component } from \"react\";\r\nimport NavBar from \"./components/navbar\";\r\nimport \"./App.css\";\r\nimport Counters from \"./components/counters\";\r\nimport NumPad from \"./components/numpad\";\r\nimport Question from \"./components/question\";\r\nimport ResultBoard from \"./components/resultBoard\";\r\nimport Timer from \"./components/timer\";\r\nimport StartButton from \"./components/startButton\";\r\nimport Image from \"./components/image\";\r\nimport SelectAnswerButtons from \"./components/selectAnswerButtons\";\r\nimport SettingsPanel from \"./components/settingsPanel\";\r\nimport WebCam from \"react-webcam\";\r\n// import SuccessModal from \"./components/successModal\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    correctAnswers: 0,\r\n    answered: 0,\r\n    totalQuestions: window.location.href.includes(\"localhost\") ? 3 : 10,\r\n    selectedMultitable: 5,\r\n    question: { questionText: \"\", answer: 0 },\r\n    resultText: \"\",\r\n    resultTextClasses: \"\",\r\n    answerField: \"\",\r\n    timerText: \"\",\r\n    startTime: \"\",\r\n    timerHandle: \"\",\r\n    resultTime: 0,\r\n    bestResultTime: 0,\r\n    bestResultTimeText: \"\",\r\n    startButtonText: \"Starta\",\r\n    isGameStarted: false,\r\n\r\n    //settings\r\n    settingsShouldHide: true,\r\n\r\n    // image\r\n    // imageFullPath: \"\",\r\n    imageShouldHide: true,\r\n    webcamShouldHide: false,\r\n\r\n    // Answer mode\r\n    answerMode: \"\",\r\n    choices: [],\r\n    hideNumPad: true,\r\n    hideSelectButtons: true,\r\n\r\n    modalShow: false,\r\n\r\n    // Captured image\r\n    caputuredImage: \"\"\r\n  };\r\n\r\n  modalClose = () => this.setState({ modalShow: false });\r\n\r\n  // importAll = r => {\r\n  //   var k = r.keys();\r\n  //   let images = {};\r\n  //   r.keys().map((item, index) => {\r\n  //     images[item.replace(\"./\", \"\")] = r(item);\r\n  //   });\r\n  //   return images;\r\n  // };\r\n\r\n  // getRandomImage = () => {\r\n  //   // Get all images in the images folder\r\n  //   var images = require\r\n  //     .context(\"./images\", false, /\\.(png|jpe?g|svg)$/)\r\n  //     .keys();\r\n  //   var length = images.length;\r\n\r\n  //   // Get random number between 0 and number of images\r\n  //   var randomIndex = Math.floor(Math.random() * length);\r\n  //   var randomImage = images[randomIndex].replace(\"./\", \"\");\r\n  //   var imageFullPath = require(\"./images/\" + randomImage);\r\n  //   return imageFullPath;\r\n  // };\r\n\r\n  updateSelectedMultiTable = newTable => {\r\n    this.setState({ selectedMultitable: newTable });\r\n  };\r\n\r\n  createNextQuestion = () => {\r\n    var random = Math.floor(Math.random() * 10 + 1);\r\n    var question = {\r\n      questionText: this.state.selectedMultitable + \" * \" + random + \" = \",\r\n      answer: this.state.selectedMultitable * random\r\n    };\r\n\r\n    this.setAnswerMode(this.answerMode);\r\n    this.setState({ question, choices: this.getFixedAnswers(question.answer) });\r\n  };\r\n\r\n  getFixedAnswers = correctAnswer => {\r\n    var fixedAnswers = [];\r\n    var numberOfAnswers = 3;\r\n    for (var i = 0; i < numberOfAnswers; i++) {\r\n      var correctAnswerIsAdded = fixedAnswers.includes(correctAnswer);\r\n      if (\r\n        !correctAnswerIsAdded &&\r\n        (i == numberOfAnswers - 1 || Math.random() < 1 / numberOfAnswers)\r\n      ) {\r\n        // Add correct number\r\n        fixedAnswers[i] = correctAnswer;\r\n        continue;\r\n      }\r\n\r\n      // Add a random numner, possible correct answer\r\n      fixedAnswers[i] = this.getRandomAnswer(fixedAnswers);\r\n    }\r\n    return fixedAnswers;\r\n  };\r\n\r\n  getRandomAnswer = excludeList => {\r\n    while (true) {\r\n      var random = Math.floor(Math.random() * 10 + 1);\r\n      var randomAnswer = this.state.selectedMultitable * random;\r\n      if (!excludeList.includes(randomAnswer)) return randomAnswer;\r\n    }\r\n  };\r\n\r\n  handleClearClicked = () => {\r\n    this.setState({ answerField: \"\" });\r\n  };\r\n\r\n  handleAnswerbuttonClicked = answer => {\r\n    this.handleOkClicked(answer);\r\n  };\r\n\r\n  handleOkClicked = answer => {\r\n    if (this.state.isGameStarted == false) {\r\n      return;\r\n    }\r\n\r\n    // Check input against answer.\r\n    // If correct, increase correctAnswers and show new question.\r\n    // Otherwise, show an error\r\n    if (answer == this.state.question.answer) {\r\n      // Correct answer\r\n      this.setState({\r\n        correctAnswers: ++this.state.correctAnswers,\r\n        answered: ++this.state.answered,\r\n        resultText: \"Rätt!\",\r\n        resultTextClasses: \"bg-success\"\r\n      });\r\n\r\n      if (this.state.correctAnswers === this.state.totalQuestions) {\r\n        // User has answered alla questsions. End the game\r\n        this.endGame();\r\n      } else {\r\n        // More questions to answer. Display next one\r\n        this.createNextQuestion();\r\n      }\r\n    } else {\r\n      // Wrong answer\r\n      this.setState({\r\n        resultText: \"Fel!\",\r\n        resultTextClasses: \"bg-danger\",\r\n        choices: this.getFixedAnswers(this.state.question.answer)\r\n      });\r\n    }\r\n\r\n    this.setState({ answerField: \"\" });\r\n  };\r\n\r\n  endGame = () => {\r\n    // Stop timer and calculate result time\r\n    this.stopGame();\r\n\r\n    // Generate success image\r\n    // var imageFullPath = require(\"./images/Inez_staende_mob.JPG\");\r\n    // var imageFullPath = this.getRandomImage();\r\n    // var imageFullPath = ;\r\n\r\n    // Update the state\r\n    this.setState({\r\n      resultText: \"Klar! Tid: \" + this.getTimerText(this.state.resultTime),\r\n      // imageFullPath: this.caputuredImage,\r\n      imageShouldHide: false\r\n    });\r\n  };\r\n\r\n  handleStartButtonClicked = () => {\r\n    // Toggle the button\r\n    if (this.state.isGameStarted) {\r\n      // Stop the game and the timer\r\n      this.stopGame();\r\n    } else {\r\n      // Start the game and the timer\r\n      this.startGame();\r\n    }\r\n  };\r\n\r\n  startGame = () => {\r\n    this.createNextQuestion();\r\n    this.capture();\r\n    this.setState({\r\n      correctAnswers: 0,\r\n      startButtonText: \"Stop\",\r\n      resultText: \"\",\r\n      isGameStarted: true,\r\n      startTime: new Date(),\r\n      timerHandler: setInterval(this.tick, 33),\r\n      imageShouldHide: true,\r\n      webcamShouldHide: true\r\n    });\r\n  };\r\n\r\n  settingsPanelClicked = () => {\r\n    var currentValue = this.state.settingsShouldHide;\r\n    this.setState({ settingsShouldHide: !currentValue });\r\n  };\r\n\r\n  stopGame = () => {\r\n    clearInterval(this.state.timerHandler);\r\n    this.setResultTime();\r\n    if (\r\n      this.state.resultTime < this.state.bestResultTime ||\r\n      this.state.bestResultTime === 0\r\n    ) {\r\n      // New record!\r\n      this.setState({\r\n        bestResultTime: this.state.resultTime,\r\n        bestResultTimeText: this.getTimerText(this.state.resultTime)\r\n      });\r\n    }\r\n\r\n    var question = {\r\n      questionText: \"\",\r\n      answer: -1\r\n    };\r\n\r\n    this.setState({\r\n      startButtonText: \"Start\",\r\n      isGameStarted: false,\r\n      question: question\r\n    });\r\n  };\r\n\r\n  tick = () => {\r\n    if (this.state.isGameStarted == true) this.setResultTime();\r\n  };\r\n\r\n  setResultTime = () => {\r\n    var date1 = this.state.startTime; //new Date(\"7/Nov/2012 20:30:00\");\r\n    var date2 = new Date();\r\n    var milliseconds = date2.getTime() - date1.getTime();\r\n\r\n    this.setState({\r\n      resultTime: milliseconds,\r\n      timerText: this.getTimerText(milliseconds)\r\n    });\r\n\r\n    console.log(\r\n      \"ResultTime:\" + milliseconds + \" = \" + this.getTimerText(milliseconds)\r\n    );\r\n  };\r\n\r\n  getTimerText = milliseconds => {\r\n    var days = Math.floor(milliseconds / (1000 * 60 * 60 * 24));\r\n    milliseconds -= days * (1000 * 60 * 60 * 24);\r\n\r\n    var hours = Math.floor(milliseconds / (1000 * 60 * 60));\r\n    milliseconds -= hours * (1000 * 60 * 60);\r\n\r\n    var mins = Math.floor(milliseconds / (1000 * 60));\r\n    milliseconds -= mins * (1000 * 60);\r\n\r\n    var seconds = Math.floor(milliseconds / 1000);\r\n    milliseconds -= seconds * 1000;\r\n\r\n    return (\r\n      mins + \" min \" + seconds + \",\" + Math.round(milliseconds / 100) + \" sek\"\r\n    );\r\n  };\r\n\r\n  numkeyOnClickHandler = numkey => {\r\n    if (this.state.isGameStarted == false) return;\r\n\r\n    var answerField = \"\";\r\n    if (numkey < 10) {\r\n      answerField = this.state.answerField + numkey;\r\n    }\r\n    this.setState({ answerField, resultText: \"\" });\r\n  };\r\n\r\n  setAnswerMode = mode => {\r\n    // alert(\"\" + mode);\r\n    var hideNumPad = false;\r\n    var hideSelectButtons = false;\r\n    if (mode == \"numpad\") {\r\n      hideNumPad = false;\r\n      hideSelectButtons = true;\r\n    } else {\r\n      hideNumPad = true;\r\n      hideSelectButtons = false;\r\n    }\r\n\r\n    this.setState({\r\n      answerMode: mode,\r\n      hideNumPad: hideNumPad,\r\n      hideSelectButtons: hideSelectButtons\r\n    });\r\n  };\r\n\r\n  setRef = webcam => {\r\n    this.webcam = webcam;\r\n  };\r\n\r\n  capture = () => {\r\n    const imageSrc = this.webcam.getScreenshot();\r\n    this.setState({\r\n      caputuredImage: imageSrc\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const videoConstraints = {\r\n      width: 1280,\r\n      height: 720,\r\n      facingMode: \"user\"\r\n    };\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <NavBar bestResultTimeText={this.state.bestResultTimeText} />\r\n        <main className=\"container\">\r\n          <div>\r\n            <SettingsPanel\r\n              onSettingsPanelClicked={this.settingsPanelClicked}\r\n              settingsShouldHide={this.state.settingsShouldHide}\r\n              onAnswerModeChanged={this.setAnswerMode}\r\n              choooseAnswerChecked={this.state.answerMode != \"numpad\"}\r\n              updateSelectedMultiTable={this.updateSelectedMultiTable}\r\n            />\r\n            {/* <ToogleAnswerMode\r\n              onAnswerModeChanged={this.setAnswerMode}\r\n              choooseAnswerChecked={this.state.answerMode != \"numpad\"}\r\n            /> */}\r\n            <StartButton\r\n              buttonText={this.state.startButtonText}\r\n              onClick={this.handleStartButtonClicked}\r\n              timerText={this.state.timerText}\r\n            />\r\n\r\n            <Timer>timer={this.state.timer}</Timer>\r\n\r\n            <ResultBoard\r\n              resultTextClasses={this.state.resultTextClasses}\r\n              correctAnswers={this.state.correctAnswers}\r\n              total={this.state.totalQuestions}\r\n              resultText={this.state.resultText}\r\n            />\r\n            <Question\r\n              questionText={this.state.question.questionText}\r\n              answerField={this.state.answerField}\r\n            />\r\n            {!this.state.hideSelectButtons && (\r\n              <SelectAnswerButtons\r\n                choices={this.state.choices}\r\n                answerbuttonClicked={this.handleAnswerbuttonClicked}\r\n              />\r\n            )}\r\n            {!this.state.hideNumPad && (\r\n              <NumPad\r\n                hide={this.state.hideNumPad}\r\n                okClicked={this.handleOkClicked}\r\n                clearClicked={this.handleClearClicked}\r\n                numkeyClicked={this.numkeyOnClickHandler}\r\n                answerField={this.state.answerField}\r\n              />\r\n            )}\r\n            <div\r\n              style={{\r\n                display: this.state.webcamShouldHide ? \"none\" : \"block\"\r\n              }}\r\n            >\r\n              <WebCam\r\n                audio={false}\r\n                height={350}\r\n                ref={this.setRef}\r\n                screenshotFormat=\"image/jpeg\"\r\n                width={350}\r\n                videoConstraints={videoConstraints}\r\n              />\r\n            </div>\r\n            {/* <button onClick={this.capture}>Capture photo</button> */}\r\n\r\n            {/* <Image imageFullPath={this.state.caputuredImage} /> */}\r\n\r\n            {/* <label>\"hej \"+ {this.state.imageShouldHide}</label> */}\r\n            <Image\r\n              imageFullPath={this.state.caputuredImage}\r\n              imageShouldHide={this.state.imageShouldHide}\r\n            />\r\n\r\n            {/* <Image imageFullPath={this.state.imageFullPath} /> */}\r\n\r\n            {/* <Button\r\n              variant=\"primary\"\r\n              onClick={() => this.setState({ modalShow: true })}\r\n            >\r\n              Launch vertically centered modal\r\n            </Button> */}\r\n\r\n            {/* <SuccessModal\r\n              show={this.state.modalShow}\r\n              onHide={this.modalClose}\r\n            /> */}\r\n          </div>\r\n        </main>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}